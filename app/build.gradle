plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}
project.afterEvaluate {
    (android.hasProperty('applicationVariants') ? android.'applicationVariants' : android.'libraryVariants')
            .all { variant ->
                def variantName = variant.name
                def capVariantName = variantName.capitalize()
                def buildTypeName = variant.buildType.name
                def testTaskName = "test${capVariantName}UnitTest"

                println("Task -> $testTaskName")
                tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: testTaskName) {
                    //task jacocoTestReport( type: JacocoReport, dependsOn: [testTaskName 'createDebugCoverageReport']) {
                     /*tasks.register < JacocoReport > ("${testTaskName}Coverage") {
                         dependsOn(tasks.findByName(testTaskName))
*/
                    group = "Reporting"
                    description = "Generate Jacoco coverage reports on the ${variantName} build."

                    reports {
                        xml.required.set(true)
                        csv.required.set(false)
                        html.required.set(true)
                    }

                    def fileFilter = [
                            // android
                            "**/R.class",
                            '**/R$*.class',
                            "**/BuildConfig.*",
                            "**/Manifest*.*",
                            "**/*Test*.*",
                            "android/**/*.*",
                            // kotlin
                            "**/*MapperImpl*.*",
                            "**/*\$ViewInjector*.*",
                            "**/*\$ViewBinder*.*",
                            "**/BuildConfig.*",
                            "**/*Component*.*",
                            "**/*BR*.*",
                            "**/Manifest*.*",
                            '**/*$Lambda$*.*',
                            "**/*Companion*.*",
                            "**/*Module*.*",
                            "**/*Dagger*.*",
                            "**/*Hilt*.*",
                            "**/*MembersInjector*.*",
                            "**/*_MembersInjector.class",
                            "**/*_Factory*.*",
                            "**/*_Provide*Factory*.*",
                            "**/*Extensions*.*",
                            // sealed and data classes
                            "**/*\$Result.*",
                            '**/*$Result$*.*',
                            // adapters generated by moshi
                            "**/*JsonAdapter.*",
                            "**/*Activity*",
                            "**/di/**",
                            "**/hilt*/**",
                            "**/entrypoint/**",
                            "**/theme/**",
                            "**/*Screen*.*"
                    ]

                         def javaTree = "${project.buildDir}/intermediates/javac/${variantName}/classes"
                         def kotlinTree = "${project.buildDir}/tmp/kotlin-classes/${variantName}"
                         def javaClasses = fileTree(dir: javaTree, excludes: fileFilter)
                         def kotlinClasses = fileTree(dir: kotlinTree, excludes: fileFilter)
                         classDirectories.from = files([javaClasses, kotlinClasses])

                         def coverageSourceDirs = [
                                 "${project.projectDir}/src/main/java",
                                 "${project.projectDir}/src/$variantName/java",
                                 "${project.projectDir}/src/$buildTypeName/java"
                         ]

                         executionData.from = files(["${project.buildDir}/jacoco/${testTaskName}.exec"])

                        /* def sourceDirs = [
                                 "src/main/java",
                                           "src/$variantName/java",
                                           "src/$buildTypeName/java"]*/

                    sourceDirectories.setFrom(files(coverageSourceDirs))
                    additionalSourceDirs.setFrom(files(coverageSourceDirs))
                }
            }
}

android {
    namespace 'com.hamza.payback'
    compileSdk 33

    defaultConfig {
        applicationId "com.hamza.payback"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests.returnDefaultValues = true
    }

    /*testOptions {
        //execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }*/
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

dependencies {
    def mockitoVersion = '4.6.1'
    def mockitoInLineVersion = '3.11.2'
    def mockitoAndroidVersion = '2.25.0'
    // This need to be validated. Risk and maintenance
    def mockitokotlinNhaarmanVersion = '2.2.0'

    def coroutinesVersion = '1.7.0'

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    // Glide to load images
    implementation 'com.github.bumptech.glide:glide:4.13.2'
    implementation 'de.hdodenhof:circleimageview:3.1.0'

    // Hilt dependency injection
    implementation("com.google.dagger:hilt-android:2.46.1")
    implementation 'androidx.navigation:navigation-fragment-ktx:2.6.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.6.0'
    kapt("com.google.dagger:hilt-android-compiler:2.46.1")

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation "com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2"

    //Moshi
    implementation "com.squareup.moshi:moshi:1.14.0"
    implementation "com.squareup.moshi:moshi-adapters:1.14.0"
    implementation "com.squareup.moshi:moshi-kotlin:1.14.0"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.14.0"

    //Moshi tools
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'

    //Mockito
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitokotlinNhaarmanVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoInLineVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoAndroidVersion"

    // For instrumentation tests
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.46.1'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.46.1'
    androidTestImplementation 'com.google.truth:truth:1.1.3'
    androidTestImplementation 'androidx.test:core-ktx:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // For local unit tests
    testImplementation 'com.google.dagger:hilt-android-testing:2.46.1'
    kaptTest 'com.google.dagger:hilt-compiler:2.46.1'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "androidx.test:core:1.5.0"
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:1.8.0"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:1.8.20"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
}